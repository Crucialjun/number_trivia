// Mocks generated by Mockito 5.4.3 from annotations
// in number_trivia/test/features/domain/usecases/get_concrete_number_trivia_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:number_trivia/core/error/failures.dart' as _i3;
import 'package:number_trivia/features/domain/entities/number_trivia.dart'
    as _i4;
import 'package:number_trivia/features/domain/repositories/number_trivia_repository.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFailure_1 extends _i1.SmartFake implements _i3.Failure {
  _FakeFailure_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNumberTrivia_2 extends _i1.SmartFake implements _i4.NumberTrivia {
  _FakeNumberTrivia_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NumberTriviaRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNumberTriviaRepository extends _i1.Mock
    implements _i5.NumberTriviaRepository {
  MockNumberTriviaRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i3.Failure, _i4.NumberTrivia>> getConcreteNumberTrivia(
          int? number) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConcreteNumberTrivia,
          [number],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i3.Failure, _i4.NumberTrivia>>.value(
                _FakeEither_0<_i3.Failure, _i4.NumberTrivia>(
          this,
          Invocation.method(
            #getConcreteNumberTrivia,
            [number],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i3.Failure, _i4.NumberTrivia>>);

  @override
  (_i3.Failure, _i4.NumberTrivia) getConcreteNumberTriviaRecords(int? number) =>
      (super.noSuchMethod(
        Invocation.method(
          #getConcreteNumberTriviaRecords,
          [number],
        ),
        returnValue: (
          _FakeFailure_1(
            this,
            Invocation.method(
              #getConcreteNumberTriviaRecords,
              [number],
            ),
          ),
          _FakeNumberTrivia_2(
            this,
            Invocation.method(
              #getConcreteNumberTriviaRecords,
              [number],
            ),
          )
        ),
      ) as (_i3.Failure, _i4.NumberTrivia));

  @override
  _i6.Future<_i2.Either<_i3.Failure, _i4.NumberTrivia>>
      getRandomNumberTrivia() => (super.noSuchMethod(
            Invocation.method(
              #getRandomNumberTrivia,
              [],
            ),
            returnValue:
                _i6.Future<_i2.Either<_i3.Failure, _i4.NumberTrivia>>.value(
                    _FakeEither_0<_i3.Failure, _i4.NumberTrivia>(
              this,
              Invocation.method(
                #getRandomNumberTrivia,
                [],
              ),
            )),
          ) as _i6.Future<_i2.Either<_i3.Failure, _i4.NumberTrivia>>);

  @override
  (_i3.Failure, _i4.NumberTrivia) getRandomNumberTriviaRecords() =>
      (super.noSuchMethod(
        Invocation.method(
          #getRandomNumberTriviaRecords,
          [],
        ),
        returnValue: (
          _FakeFailure_1(
            this,
            Invocation.method(
              #getRandomNumberTriviaRecords,
              [],
            ),
          ),
          _FakeNumberTrivia_2(
            this,
            Invocation.method(
              #getRandomNumberTriviaRecords,
              [],
            ),
          )
        ),
      ) as (_i3.Failure, _i4.NumberTrivia));
}
